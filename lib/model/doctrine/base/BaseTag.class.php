<?php

/**
 * BaseTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property Doctrine_Collection $Posts
 * @property Doctrine_Collection $PostTags
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method Doctrine_Collection getPosts()       Returns the current record's "Posts" collection
 * @method Doctrine_Collection getPostTags()    Returns the current record's "PostTags" collection
 * @method Tag                 setId()          Sets the current record's "id" value
 * @method Tag                 setName()        Sets the current record's "name" value
 * @method Tag                 setDescription() Sets the current record's "description" value
 * @method Tag                 setPosts()       Sets the current record's "Posts" collection
 * @method Tag                 setPostTags()    Sets the current record's "PostTags" collection
 * 
 * @package    Blog
 * @subpackage model
 * @author     Conates
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tag');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('description', 'string', 1000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 1000,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Post as Posts', array(
             'refClass' => 'PostTag',
             'local' => 'tag_id',
             'foreign' => 'post_id'));

        $this->hasMany('PostTag as PostTags', array(
             'local' => 'id',
             'foreign' => 'tag_id'));
    }
}