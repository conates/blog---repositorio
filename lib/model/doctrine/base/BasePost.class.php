<?php

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property timestamp $date
 * @property enum $state
 * @property integer $user_id
 * @property Doctrine_Collection $sfGuardUser
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $PostCategorys
 * @property Doctrine_Collection $PostTags
 * @property Doctrine_Collection $Categories
 * @property Doctrine_Collection $Posts
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method string              getTitle()         Returns the current record's "title" value
 * @method string              getContent()       Returns the current record's "content" value
 * @method timestamp           getDate()          Returns the current record's "date" value
 * @method enum                getState()         Returns the current record's "state" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method Doctrine_Collection getSfGuardUser()   Returns the current record's "sfGuardUser" collection
 * @method Doctrine_Collection getComments()      Returns the current record's "Comments" collection
 * @method Doctrine_Collection getTags()          Returns the current record's "Tags" collection
 * @method Doctrine_Collection getPostCategorys() Returns the current record's "PostCategorys" collection
 * @method Doctrine_Collection getPostTags()      Returns the current record's "PostTags" collection
 * @method Doctrine_Collection getCategories()    Returns the current record's "Categories" collection
 * @method Doctrine_Collection getPosts()         Returns the current record's "Posts" collection
 * @method Post                setId()            Sets the current record's "id" value
 * @method Post                setTitle()         Sets the current record's "title" value
 * @method Post                setContent()       Sets the current record's "content" value
 * @method Post                setDate()          Sets the current record's "date" value
 * @method Post                setState()         Sets the current record's "state" value
 * @method Post                setUserId()        Sets the current record's "user_id" value
 * @method Post                setSfGuardUser()   Sets the current record's "sfGuardUser" collection
 * @method Post                setComments()      Sets the current record's "Comments" collection
 * @method Post                setTags()          Sets the current record's "Tags" collection
 * @method Post                setPostCategorys() Sets the current record's "PostCategorys" collection
 * @method Post                setPostTags()      Sets the current record's "PostTags" collection
 * @method Post                setCategories()    Sets the current record's "Categories" collection
 * @method Post                setPosts()         Sets the current record's "Posts" collection
 * 
 * @package    Blog
 * @subpackage model
 * @author     Conates
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 8,
             ));
        $this->hasColumn('title', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('content', 'string', 50000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50000,
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('state', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Publicado',
              1 => 'Borrador',
              2 => 'Pendiente',
             ),
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 4,
             ));


        $this->setAttribute(Doctrine_Core::ATTR_EXPORT, Doctrine_Core::EXPORT_ALL);
        $this->setAttribute(Doctrine_Core::ATTR_VALIDATE, true);

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('Tag as Tags', array(
             'refClass' => 'PostTag',
             'local' => 'post_id',
             'foreign' => 'tag_id'));

        $this->hasMany('PostCategory as PostCategorys', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostTag as PostTags', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('Category as Categories', array(
             'refClass' => 'PostCategory',
             'local' => 'post_id',
             'foreign' => 'category_id'));

        $this->hasMany('Visit as Posts', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $searchable0 = new Doctrine_Template_Searchable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
              1 => 'content',
              2 => 'state',
             ),
             'canUpdate' => true,
             ));
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($searchable0);
        $this->actAs($sluggable0);
    }
}